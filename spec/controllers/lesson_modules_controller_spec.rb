require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LessonModulesController, type: :controller do
  login_admin

  # This should return the minimal set of attributes required to create a valid
  # LessonModule. As you add validations to LessonModule, be sure to
  # adjust the attributes here as well.
  let(:lesson){ FactoryGirl.create(:lesson_no_call_backs) }
  let(:course) { FactoryGirl.create(:course)}
  let(:valid_attributes) {
    {
        name: 'Definition',
        attempts: 3,
        in_use: false,
        value_percentage: 30,
        lesson_id: lesson.id,
        number_of_answers: 4
    }
  }

  let(:invalid_attributes) {
    {
        name: 'Add',
        attempts: -1,
        in_use: nil,
        lesson_id: nil,
        value_percentage: 300
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LessonModulesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all lesson_modules as @lesson_modules" do
      lesson_module = LessonModule.create! valid_attributes
      get :index, {course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
      #expect(assigns(:lesson_modules)).to eq([lesson_module])
    end
  end

  describe "GET #show" do
    it "assigns the requested lesson_module as @lesson_module" do
      lesson_module = LessonModule.create! valid_attributes
      get :show, {:id => lesson_module.to_param, course_id: course.id, lesson_id: lesson.id}, valid_session
      expect(assigns(:lesson_module)).to eq(lesson_module)
    end
  end

  describe "GET #new" do
    it "assigns a new lesson_module as @lesson_module" do
      get :new, {course_id: course.id, lesson_id: lesson.id}, valid_session
      expect(assigns(:lesson_module)).to be_a_new(LessonModule)
    end
  end

  describe "GET #edit" do
    it "assigns the requested lesson_module as @lesson_module" do
      lesson_module = LessonModule.create! valid_attributes
      get :edit, {:id => lesson_module.to_param, course_id: course.id, lesson_id: lesson.id}, valid_session
      expect(assigns(:lesson_module)).to eq(lesson_module)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new LessonModule" do
        expect {
          post :create, {lesson_module: valid_attributes, course_id: course.id, lesson_id: lesson.id}, valid_session
        }.to change(LessonModule, :count).by(1)
      end

      it "assigns a newly created lesson_module as @lesson_module" do
        post :create, {:lesson_module => valid_attributes, course_id: course.id, lesson_id: lesson.id}, valid_session
        expect(assigns(:lesson_module)).to be_a(LessonModule)
        expect(assigns(:lesson_module)).to be_persisted
      end

      it "redirects to the created lesson_module" do
        post :create, {:lesson_module => valid_attributes, course_id: course.id, lesson_id: lesson.id}, valid_session
        expect(response).to redirect_to(course_lesson_lesson_module_path(LessonModule.last, lesson_id: LessonModule.last.lesson.id, course_id: LessonModule.last.lesson.course.id))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved lesson_module as @lesson_module" do
        post :create, {:lesson_module => invalid_attributes, course_id: course.id, lesson_id: lesson.id}, valid_session
        expect(assigns(:lesson_module)).to be_a_new(LessonModule)
      end

      it "re-renders the 'new' template" do
        post :create, {:lesson_module => invalid_attributes, course_id: course.id, lesson_id: lesson.id}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
            value_percentage: 40
        }
      }

      it "updates the requested lesson_module" do
        lesson_module = LessonModule.create! valid_attributes
        put :update, {:id => lesson_module.to_param, :lesson_module => new_attributes, course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
        lesson_module.reload
        expect(assigns(:lesson_module).attributes.symbolize_keys[:value_percentage]).to eq(new_attributes[:value_percentage])
      end

      it "assigns the requested lesson_module as @lesson_module" do
        lesson_module = LessonModule.create! valid_attributes
        put :update, {:id => lesson_module.to_param, :lesson_module => valid_attributes, course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
        expect(assigns(:lesson_module)).to eq(lesson_module)
      end

      it "redirects to the lesson_module" do
        lesson_module = LessonModule.create! valid_attributes
        put :update, {:id => lesson_module.to_param, :lesson_module => valid_attributes, course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
        expect(response).to redirect_to(course_lesson_path(lesson_module.lesson.id, course_id: lesson_module.lesson.course.id))
      end
    end

    context "with invalid params" do
      it "assigns the lesson_module as @lesson_module" do
        lesson_module = LessonModule.create! valid_attributes
        put :update, {:id => lesson_module.to_param, :lesson_module => invalid_attributes, course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
        expect(assigns(:lesson_module)).to eq(lesson_module)
      end

      it "re-renders the 'edit' template" do
        lesson_module = LessonModule.create! valid_attributes
        put :update, {:id => lesson_module.to_param, :lesson_module => invalid_attributes, course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested lesson_module" do
      lesson_module = LessonModule.create! valid_attributes
      expect {
        delete :destroy, {:id => lesson_module.to_param, course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
      }.to change(LessonModule, :count).by(-1)
    end

    it "redirects to the lesson_modules list" do
      lesson_module = LessonModule.create! valid_attributes
      delete :destroy, {:id => lesson_module.to_param, course_id: lesson_module.lesson.course.id, lesson_id: lesson_module.lesson.id}, valid_session
      expect(response).to redirect_to(course_lesson_lesson_modules_path(lesson_id: lesson_module.lesson.id, course_id: lesson_module.lesson.course.id))
    end
  end

end
